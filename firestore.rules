rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 인증 확인 함수
    function isSignedIn() {
      return request.auth != null;
    }

    // 본인 확인 함수
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // 관리자 확인 함수 (level 10)
    function isAdmin() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 10;
    }

    // 파트너 확인 함수 (type이 partner)
    function isPartner() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'partner';
    }

    // 일반 사용자 확인 함수 (type이 user)
    function isUser() {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'user';
    }

    // Users collection
    match /users/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isSignedIn() && isOwner(userId);

      // 파트너 목록 조회는 모두 가능 (StoreList에서 사용)
      allow read: if true;

      // chatRooms 필드만 업데이트 가능 (채팅방 생성 시 또는 나가기 시)
      allow update: if isSignedIn() && isOwner(userId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['chatRooms']);

      // 관리자는 모든 필드 수정 가능
      allow update: if isAdmin();
    }

    // Products collection (상품)
    match /products/{productId} {
      // 모든 사용자 읽기 가능
      allow read: if true;

      // 로그인한 사용자만 상품 생성 가능
      allow create: if isSignedIn();

      // 본인 상품만 수정/삭제 가능
      allow update, delete: if isSignedIn() &&
        resource.data.partnerId == request.auth.uid;

      // 관리자는 모든 상품 수정/삭제 가능
      allow update, delete: if isAdmin();
    }

    // Stores collection (가게 정보)
    match /stores/{storeId} {
      // 모든 사용자 읽기 가능
      allow read: if true;

      // 본인 가게만 생성/수정/삭제 가능 (storeId는 userId와 동일)
      allow create, update, delete: if isSignedIn() && isOwner(storeId);

      // 조회수 업데이트는 모든 사용자 가능
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount', 'lastViewedAt']);

      // likeCount 업데이트는 로그인한 사용자만 가능
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']);

      // 관리자는 모든 가게 정보 수정/삭제 가능
      allow update, delete: if isAdmin();
    }

    // Likes collection (좋아요)
    match /likes/{likeId} {
      // 모든 사용자 읽기 가능
      allow read: if true;

      // 로그인한 사용자만 자신의 좋아요 생성 가능
      allow create: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;

      // 본인의 좋아요만 삭제 가능
      allow delete: if isSignedIn() &&
        resource.data.userId == request.auth.uid;

      // 수정 불가
      allow update: if false;
    }

    // Shopping Cart collection (장바구니)
    match /shoppingCart/{cartId} {
      // 모든 사용자 읽기/쓰기 가능 (임시로 설정)
      allow read, write: if true;
    }

    // Activity logs - 레벨 10 관리자만 읽기 가능
    match /activity_logs/{logId} {
      // 관리자만 읽기 가능
      allow read: if isAdmin();

      // 로그인한 사용자는 로그 작성 가능
      allow create: if isSignedIn();

      // 수정/삭제 불가
      allow update, delete: if false;
    }

    // Magazines collection - 매거진
    match /magazines/{magazineId} {
      // 모든 사용자 읽기 가능 (게시된 매거진은 공개)
      allow read: if true;

      // 관리자(level 10)만 생성/수정/삭제 가능
      allow create, update, delete: if isAdmin();

      // 조회수 업데이트는 모든 사용자 가능 (인증 불필요)
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount']);

      // 좋아요수 업데이트는 모든 사용자 가능 (인증 불필요)
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount']);
    }

    // Notices collection - 공지사항 (관리자용)
    match /notices/{noticeId} {
      // 모든 사용자 읽기 가능 (게시된 공지사항은 공개)
      allow read: if true;

      // 관리자(level 10)만 생성/수정/삭제 가능
      allow create, update, delete: if isAdmin();

      // 조회수 업데이트는 모든 사용자 가능
      allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount']);
    }

    // Orders collection - 주문
    match /orders/{orderId} {
      // 개별 문서 읽기: 로그인한 사용자만 자신의 주문 또는 파트너 주문 읽기 가능
      allow get: if request.auth != null &&
        (resource.data.userId == request.auth.uid ||
         resource.data.uid == request.auth.uid ||
         resource.data.storeId == request.auth.uid ||
         resource.data.partnerId == request.auth.uid);

      // 쿼리 읽기: 로그인한 사용자의 주문 쿼리 가능
      allow list: if request.auth != null;

      // 로그인한 사용자만 주문 생성 가능 (자신의 userId 또는 uid로만 생성)
      allow create: if request.auth != null &&
        (request.resource.data.userId == request.auth.uid ||
         request.resource.data.uid == request.auth.uid);

      // 주문자 본인 또는 해당 파트너만 주문 업데이트 가능
      allow update: if request.auth != null &&
        (resource.data.userId == request.auth.uid ||
         resource.data.uid == request.auth.uid ||
         resource.data.storeId == request.auth.uid ||
         resource.data.partnerId == request.auth.uid);

      // 웹훅이 결제 및 퀵 배송 관련 필드만 업데이트 가능 (인증 불필요)
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['paymentStatus', 'paymentId', 'transactionId', 'paidAt', 'paymentInfo',
                  'quickDeliveryOrderNo', 'quickDeliveryStatus', 'quickDeliveryError',
                  'partnerNotified', 'partnerNotifiedAt']);

      // 웹훅이 주문 정보를 읽을 수 있도록 허용
      allow read: if true;

      // 주문자 본인만 삭제 가능
      allow delete: if request.auth != null &&
        (resource.data.userId == request.auth.uid ||
         resource.data.uid == request.auth.uid);
    }

    // Partner Notices collection - 파트너 공지사항
    match /partner_notices/{noticeId} {
      // 모든 사용자 읽기 가능 (게시된 공지사항은 공개)
      allow read: if true;

      // 파트너(type이 partner)만 생성/수정/삭제 가능
      allow create, update, delete: if isPartner();
    }

    // Reviews collection - 리뷰
    match /reviews/{reviewId} {
      // 모든 사용자 읽기 가능 (리뷰는 공개)
      allow read: if true;

      // 일반 사용자(type이 user)만 리뷰 생성 가능 (자신의 uid로만 생성)
      allow create: if isUser() &&
        request.resource.data.uid == request.auth.uid;

      // 본인의 리뷰만 수정/삭제 가능
      allow update, delete: if isSignedIn() &&
        resource.data.uid == request.auth.uid;

      // 파트너는 답글(reply) 필드만 업데이트 가능
      allow update: if isPartner() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reply']);
    }

    // Chats collection - 채팅방
    match /chats/{chatId} {
      // 채팅방 참여자만 읽기 가능
      allow read: if isSignedIn() &&
        (request.auth.uid in resource.data.participants);

      // 로그인한 사용자만 채팅방 생성 가능 (본인이 참여자로 포함되어야 함)
      allow create: if isSignedIn() &&
        request.auth.uid in request.resource.data.participants;

      // 채팅방 참여자만 업데이트 가능 (마지막 메시지 등)
      allow update: if isSignedIn() &&
        request.auth.uid in resource.data.participants;

      // 삭제 불가
      allow delete: if false;

      // Messages subcollection - 채팅 메시지
      match /messages/{messageId} {
        // 채팅방 참여자만 메시지 읽기 가능
        allow read: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        // 채팅방 참여자만 메시지 생성 가능 (본인의 senderId로만 생성)
        allow create: if isSignedIn() &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
          request.resource.data.senderId == request.auth.uid;

        // 본인의 메시지만 업데이트 가능 (읽음 상태 등)
        allow update: if isSignedIn() &&
          resource.data.senderId == request.auth.uid;

        // 삭제 불가
        allow delete: if false;
      }
    }

    // Reports collection - 신고
    match /reports/{reportId} {
      // 관리자만 모든 신고 읽기 가능
      allow read: if isAdmin();

      // 본인이 작성한 신고만 읽기 가능
      allow read: if isSignedIn() &&
        resource.data.reporterUid == request.auth.uid;

      // 로그인한 사용자만 신고 생성 가능 (본인의 reporterUid로만 생성)
      allow create: if isSignedIn() &&
        request.resource.data.reporterUid == request.auth.uid;

      // 관리자만 신고 상태 업데이트 가능 (status 변경)
      allow update: if isAdmin();

      // 삭제 불가
      allow delete: if false;
    }

    // FAQs collection - 자주하는 질문
    match /faqs/{faqId} {
      // 모든 사용자 읽기 가능 (게시된 FAQ는 공개)
      allow read: if true;

      // 관리자(level 10)만 생성/수정/삭제 가능
      allow create, update, delete: if isAdmin();
    }

    // QuickDeliveries collection - 퀵 배송
    match /quickDeliveries/{orderId} {
      // 웹훅에서 퀵 배송 정보 읽기/쓰기 가능 (인증 불필요)
      allow read, write: if true;

      // 주문자 본인 또는 해당 파트너도 읽기 가능
      allow read: if request.auth != null;
    }

    // TaxInvoiceInfo collection - 세금계산서 정보
    match /taxInvoiceInfo/{userId} {
      // 본인만 읽기/쓰기 가능
      allow read, write: if isSignedIn() && isOwner(userId);
    }
  }
}
